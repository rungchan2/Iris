---
description: basic project descriptions
globs: 
alwaysApply: false
---
# Cinematic Profile Photo Inquiry System

## Project Overview
A photo shoot inquiry management system where photographers can showcase their portfolio based on client preferences. Clients fill out a form selecting their desired mood, style, and location, then see relevant photo references.

## Tech Stack
- **Frontend**: Next.js 15 (App Router), TypeScript, Tailwind CSS, shadcn/ui
- **Backend**: Supabase (PostgreSQL, Auth, Storage)
- **Deployment**: Vercel
- **Image Storage**: Supabase Storage (100GB included in Pro plan)

## Database Schema

### Tables

#### admin_users
```sql
- id: UUID (PK, references auth.users)
- email: TEXT (UNIQUE, NOT NULL)
- name: TEXT (NOT NULL)
- created_at: TIMESTAMPTZ
- updated_at: TIMESTAMPTZ

categories (Hierarchical, max 10 depth)
sql- id: UUID (PK)
- parent_id: UUID (FK to categories)
- name: TEXT (NOT NULL)
- depth: INT (1-10)
- path: TEXT (full path like "밝음/청춘물/자연")
- display_order: INT
- is_active: BOOLEAN
- representative_image_url: TEXT
- representative_image_id: UUID (FK to photos)
- created_at: TIMESTAMPTZ
- updated_at: TIMESTAMPTZ

photos
sql- id: UUID (PK)
- filename: TEXT (NOT NULL)
- storage_url: TEXT (NOT NULL)
- thumbnail_url: TEXT
- width: INT
- height: INT
- size_kb: INT
- uploaded_by: UUID (FK to admin_users)
- is_active: BOOLEAN
- created_at: TIMESTAMPTZ
- updated_at: TIMESTAMPTZ

photo_categories (Many-to-many)
sql- id: UUID (PK)
- photo_id: UUID (FK to photos)
- category_id: UUID (FK to categories)
- created_at: TIMESTAMPTZ
- UNIQUE(photo_id, category_id)

inquiries
sql- id: UUID (PK)
- name: TEXT (NOT NULL)
- instagram_id: TEXT
- gender: ENUM ('male', 'female', 'other')
- phone: TEXT (NOT NULL)
- desired_date: DATE
- people_count: INT
- relationship: TEXT
- current_mood_keywords: TEXT[] (keyword IDs)
- desired_mood_keywords: TEXT[] (keyword IDs)
- special_request: TEXT
- difficulty_note: TEXT
- selected_category_id: UUID (FK to categories)
- selection_path: TEXT[] (e.g., ['밝음', '청춘물', '자연'])
- selection_history: JSONB
- status: ENUM ('new', 'contacted', 'completed')
- admin_note: TEXT
- created_at: TIMESTAMPTZ
- updated_at: TIMESTAMPTZ

keywords
sql- id: UUID (PK)
- type: TEXT ('current_mood' or 'desired_mood')
- name: TEXT (NOT NULL)
- display_order: INT
- is_active: BOOLEAN
- created_at: TIMESTAMPTZ
- UNIQUE(type, name)

available_dates
sql- id: UUID (PK)
- date: DATE (UNIQUE, NOT NULL)
- is_available: BOOLEAN
- max_bookings: INT
- current_bookings: INT
- created_at: TIMESTAMPTZ
- updated_at: TIMESTAMPTZ
```

## Error Handling

Use toast notifications for user feedback
Log errors to console in development
Implement proper loading states
Handle network failures gracefully

## Performance Optimization

Use React Server Components by default
Implement virtual scrolling for large lists
Lazy load images with Intersection Observer
Cache category tree structure
Use optimistic updates for better UX

## Environment Variables
envNEXT_PUBLIC_SUPABASE_URL=your_project_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_anon_key