'use client'

import { useState, useEffect } from 'react'
import { createClient } from '@/lib/supabase/client'
import { type UserPermissions } from '@/lib/auth/permissions'

export function usePermissions() {
  const [permissions, setPermissions] = useState<UserPermissions | null>(null)
  const [loading, setLoading] = useState(true)
  const supabase = createClient()

  const signOut = async () => {
    await supabase.auth.signOut()
  }

  useEffect(() => {
    const getPermissions = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession()
        
        if (!session) {
          setPermissions({
            userType: null,
            canAccessUsers: false,
            canAccessPhotos: false,
            canAccessCategories: false,
            canAccessInquiries: false,
            canAccessSchedule: false,
            canAccessAnalytics: false,
            canAccessMyPage: false,
            canAccessReviews: false,
            canAccessPersonalityMapping: false,
          })
          setLoading(false)
          return
        }

        // Check if user is admin (stored in auth.users metadata)
        const isAdmin = session.user.user_metadata?.user_type === 'admin'

        // Only check photographer table if NOT admin (avoids unnecessary query)
        let isPhotographer = false
        if (!isAdmin) {
          const { data: photographer } = await supabase
            .from('photographers')
            .select('id')
            .eq('id', session.user.id)
            .maybeSingle()  // Use maybeSingle to avoid error when no rows

          isPhotographer = !!photographer
        }

        // Admin has access to everything
        if (isAdmin) {
          setPermissions({
            userType: 'admin',
            canAccessUsers: true,
            canAccessPhotos: true,
            canAccessCategories: true,
            canAccessInquiries: true,
            canAccessSchedule: true,
            canAccessAnalytics: true,
            canAccessMyPage: true,
            canAccessReviews: true,
            canAccessPersonalityMapping: true,
          })
        } else if (isPhotographer) {
          // Photographer has limited access
          setPermissions({
            userType: 'photographer',
            canAccessUsers: false,
            canAccessPhotos: true,
            canAccessCategories: false,
            canAccessInquiries: true,
            canAccessSchedule: true,
            canAccessAnalytics: false,
            canAccessMyPage: true,
            canAccessReviews: true,
            canAccessPersonalityMapping: true,
          })
        } else {
          // No access if neither admin nor photographer
          setPermissions({
            userType: null,
            canAccessUsers: false,
            canAccessPhotos: false,
            canAccessCategories: false,
            canAccessInquiries: false,
            canAccessSchedule: false,
            canAccessAnalytics: false,
            canAccessMyPage: false,
            canAccessReviews: false,
            canAccessPersonalityMapping: false,
          })
        }
      } catch (error) {
        console.error('Failed to get permissions:', error)
        setPermissions({
          userType: null,
          canAccessUsers: false,
          canAccessPhotos: false,
          canAccessCategories: false,
          canAccessInquiries: false,
          canAccessSchedule: false,
          canAccessAnalytics: false,
          canAccessMyPage: false,
          canAccessReviews: false,
          canAccessPersonalityMapping: false,
        })
      } finally {
        setLoading(false)
      }
    }

    getPermissions()
  }, [supabase])

  return { permissions, loading, signOut }
}